#!/bin/sh
#############################################################################
gDate=240205
gVers=022
#############################################################################
#	Aerialist 1.22
#
#	A rewrite of the Aerial screensaver
#
#	Linux video screensaver gone wild - featuring
#
#		AppleTV online or cached videos
#		YouTube/Dailymotion etc via yt-dlp/youtube-dl and Seasons
#
#		Intermittent title/time overlay
#		Resume where the video was last interrupted
#
#		Crontab like selection of season
#			See "STABLE" below
#		(e.g. Fireplace at night in Winter, Places, Animals by weekday)
#
#	Parameters that are "fun" are up front
#		Customize by putting overrides into ~/.config/aerialist
#		in shell format - or call script with 'set' or 'settings' to edit
#
#	(p) Public Domain, 2023-24 by Greg Kerr
#############################################################################
#
#	* Usage - For Terminal invocation or called by xscreensaver
#
#	aerialist [cmds][parameters]...
#	
#	Cmd			Action
#	---			------
#	install		install into .xscreensaver file, offer to pre-cache videos
#	set			Edit ~/.config/aerialist settings
#	seasons		List seasons
#	vid [s]		List videos for a season
#	cron		List time table for which videos to play, show current
#	test [p]	Run a test with just this video
#
#	sound [v]	Set volume to this %age
#	aerial [p]	Path to find folders of videos (aka Seasons)
#	movies [p]	Path to videos - (no seasons)
#
#	(For xscreensaver primarily)
#	online		Use ATV Videos via web only
#		4k		Use 4k versions of ATVs
#		hdr		Use HDR versions of ATVs
#	offline		Use Cached videos only
#
#	Call with no parameters to test with logging to terminal
#	Normally called from xscreensaver to enhance your idle screen
##
#############################################################################
#																			#
#			Global Parameters												#
#																			#
# Options - override in ~/.config/aerialist with shell format script
ONLINE=1					# Allow network video play - set to 2 to FORCE online ONLY
ONLINE4K=0					# Online 4K option (vs 2K if available)
ONLINEHDR=0					# Online HDR option (vs SDR if available)
CACHE=1						# Download Online videos to AERIAL folder (Apple, YouTube sources)
TEST=0						# Just show the video that would play
AERIAL=~/Videos/Aerialist	# Master Path of MOVIES folders (required if ONLINE == 0)
RESUME=1					# Resume video playback from last position when interrupted
SOUND=0						# 0-100 audio volume, set in ~/.config/aerial if you wish videos with sound or in STABLE
PANSCAN=1.0					# Crop 16:9 movies - set to 0 to not do it
FORMATS=''					# List of formats to play / not play - e.g. -AV1 HEVC to disallow AV1 explicitly allow HEVC (implicitly all others) - requires mediainfo installed

SUBINTERVAL=2				# Description every this many minutes
SUBREPEATS=55				# Number of times to repeat @ SUBINTERVAL
TEXTSIZE=4					# %age of screen pixels for label
TEXTRGB=AA998877			# Text Color

# Add your own seasons and times to play - link
# Format - Weekday (can be multiple) MonthDay-Begin M-D-End 24HourBeg 24HourEnd AudioVolume Weight SeasonName
STABLE="
	6	1-1		1-31	17	18	0	0	Example-SilentSundayEveningInJanuary
$STABLE"

# Add your own video seasons - format Season= id id id id
BITES="
MyVideos=		BtoopYV_HdM	dmo:x8g7rts
$BITES
"

# A player will be chosen as available if this is empty - but you can override with preferred player
PLAYER=''			# Empty to use mpv -> mplayer -> vlc
PLARGS=''			# Any additional player arguments
ONLINETPT='http'	# Transport to get online assets (http or https)
############################################################################
#	End of User interesting section

####################################################
#
#	Season Table - what videos to play by date/time
#		(Northern Hemishpere Timed/Named)
#
#	WD	BDate	EDate	BH	EH	Vo	We	Name
STABLE='
	*	12-1	2-14	19	7	22	0	Fireplace
	*	*		*		19	7	11	0	Night
	*	*		*		16	18	1	90	Sports
	6	*		*		12	16	13	90	DIY
	06	*		*		16	20	19	75	Music
	135	*		*		8	15	11	90	Animals
	56	*		*		13	17	5	75	Trains
	*	*		*		9	17	9	75	Places
	*	12-1	2-29	*	*	15	99	Winter
	*	3-1		5-31	*	*	15	99	Spring
	*	6-1		8-31	*	*	15	99	Summer
	*	9-1		11-30	*	*	15	99	Autumn
	*	*		*		*	*	11	10	Apple
'


# Video sites - last one is default if no prefix on video ID
# One can add any yt-dlp supported site here with prefix - then use that
#  prefix in the BITES table below whose Season Title should be put in
#  the STABLE above
VITES='
	dmo:www.dailymotion.com/video/
	ytb:www.youtube.com/watch?v=
'

# Online Video IDs - format Season=id id id id Season2= id id id id
# Where id is [source:]videoid and default source is youtube - see VITES
# Comments may be used after a # character
# To add new season(s) in settings extend or replace this
BITES='
Animals=	Wb14e21CN5Y s7DbVTkaXn0 NyelTWkAMUE yYoWnLCvYo0 DVTRklHhEsU
			ZPyQh7jjbpE qOXeIip16No eoTpdTU8nTA asTC8fvw0W8 3qBfTWuFjbo

Fireplace=	mKCieTImjvU 6j3hPg0t5fo B0j__sZXiWI 7pTdGR46ZKA eYy-ahKKMys
			paiSoYQhaBE KzmtBgqap0s wNwMnGRjgdw bmGsQkLb4yg

Night=		B5unCXpegAw o7w1jq29oZU bCEMBU9Sk98 SiryvrStb8E -SMKVJO_wGo
			pRROyjwdNjA 3Ow0ET-ob3E GX7xOqLgkTM 3G1KBu6H6BM UV07v89nf3g
			44KvHwRHb3A JpyPwnDaijU zdOTV2RH9IY pOBrBb0gV64 jvTAPzS8glw
			HTeNfkAoUlI	REDVbTQxMXo vSwz4n24koY _Sx8NX2TsqI lpmAs7FhOs4
			y1doKCK7Dwk qgfd-uWTVwg bCEMBU9Sk98 B5unCXpegAw DhNMS5mD4ak
			3Qn7_mljjTg TfqaEJpQmDc veCr5M0rNpo lL5RPnXyklk pyu-djhQFVU
			6zh-LN-dObY DslTxXsDLsw gosjiD288Jk N-FwVPT0BSk

Places=		Ee0Qh_nIoHw	#	Afrika
			CHSnz0bCaUk	#	Alaska
			YDL8HbY9ENU	#	Argentina
			bQmzk05I3nw	#	Australia
			eaLWXfsuxf0	#	Bali
			Vmx6I1vQFSs	#	Bavaria
			jpZaVpjWbbI	#	Caribbean
			-TXh2rrNshI	#	China
			gig9-jO7YL4	#	Earth
			EBsnEiDTqEQ	#	Egypt
			0EdVsuDq28M	#	Europe
			dmo:x7vvcvj	#	Florida
			6lxg0NKZjOE	#	France
			8_j64iq_hTE	#	Germany
			li-_BLtq58w	#	Germany II
			rFVpSwgCkCo	#	Hawaii
			8SO273jh_LI	#	India
			ycDLfQ1Cv_Y	#	Ireland
			56gZuTy6xIc	#	Italy
#			aaiLCfShqG0	#	Italy - Rome 2hr
			E4c21evjzFc	#	Italy - Rome 1hr
			G5RpJwCJDqc	#	Japan
			Cjl70Cqo3Q4	#	Kashmir
			-s0vUJamgEw	#	Namibia
			gCRNEJxDJKM	#	Nepal
			vtxVK3sbZ0o	#	New Zealand
			dmo:x7x1xw3 #	North Carolina
			CxwJrzEdw1U	#	Norway
			jjP12kUYUs4	#	Philippines
			mTm0WKWGpas	#	Saudi Arabia
			qEjzVTo2eTs	#	Slovenia 8K
			VzqWO5EaSps	#	South Africa
			NGoCQ3HyxQs	#	Sri Lanka
			kVxTrhojpFI	#	Switzerland
			DEAcPVg8V7U	#	Tanzania
			hXa-WgLCyok	#	Thailand
			4Z9mUjtFJYY	#	USA
			_K-Gtb_ywfg	#	Venezuela
			64bA0CxioCE	#	Vietnam
			Ihiy9A__QM8 #	Wonders
			dmo:x8g7rts	#	Zanzibar

Trains=		_O1eGD8XbTg	#	Africa - Coppertrail
			YhAfiuqt5zE	#	France - Chamonix to Montenvers
			dp0PgoELHk0	#	Germany - Berlin
			ujm_3XB-IYc	#	Hungary Győr to Veszprém
			m2lC_JG6zdk	#	India
			yq6KXZ78p-M	#	India - Palakkad, Kerala
			iNfcXZVRjns	#	India - Ooty to Coonoor
			njTPvmcPUGs	#	150+ Trains Part 1
			zomZywCAPTA	#	Montenegro
			SBd3C9vEkJM	#	Russia - TSE
			YRyLAR6A1Wc	#	Switzerland
			Gkr5_sz_uGM	#	USA - Alaska - Skagway
			MK_RazmDMaA	#	USA - Appalachian Foothills
			YjF2pk19A7Q	#	USA - Blue Ridge Scenic Railway
			k9VpqUeI-mk	#	USA	- NH

Sports=		wj_ZEDISBnA I6VpZ3bnnKI o7W7OvETO40 plt8tdGyygI lMbN6IcrxLs
			JEtYYtwX1sM 5X57DS7cvHs yL-4vY9BWL0 7jz0pXSe_kI mTM1_m48IcA
			hEGQZeBBvsA CAs0DjbH92s kE7D7qFayVg _uKWgZpUjYU zd4EIXDjEJ4
			nnWtfMRuIdE BFJ6vbwAsgI z1qLQ7P8_Yk hwDI4cbioLw xLoImWFNBiA
			bg3XO_991VE -mFOj3Vfm1A FQgWc1_cLfk bcwnLnooA5g yaVnhuXRIx4
			KxllkdTTs1M o7W7OvETO40 NR7YyJrj0c8 vQopnwLFdXc 2giTb7IpJDU
			nwpX4zEW1wc tx1-fDueJxg D7v4VAB1NoY J2v2k06Rp-U rC4UVSqi0qc
			9nuGI9fnOME V55DRE9vJSs 5oBlBwd9HeA zrbpDg1xHSU

Winter=		ZyCudosHxUA 3PXUO_7Pj5o WrBmEymjbmU Q4Ht5wd9Iec UmhbcBClFm8

Spring=		UZ9uyQI3pF0 ikn24Lvyb5U LLk0rwWq-E8 Y88Nm7RsZAk hOdhtImnb5Y

Summer=		o4O_KoXeCFI kBfawqIMgYI RhHNcTJv9fY Bpe4ptn2jCI -l9E7OAexQM
			p9wjJYVTdfk

Autumn=		jeKABSyMlTU 6qxeqGEFDt4 qJDK-kdRZJE lN9LdcAQnjw xqDuf48WyzI
			tOAwkxO2Uj8

Music=		YbBU06irWT8 n2MtEsrcTTs B9FzVhw8_bY JSR5ETrEmIU 6iAVZr7aAJQ
			djV11Xbc914 sBzrzS1Ag_g rMqayQ-U74s kHLHSlExFis JF8BRvqGCNs
			p7FCgw_GlWc wfN4PVaOU5Q rP9Z5Pc8cRM G4LIM9VYhB0 c18441Eh_WE

DIY=		EIGcemiOT4M ZsE7IR0Ty74 JAJFQw8Vo-o EIGcemiOT4M -207fdj7Wuo
			0CdG6qkGfm8
'

# Globals
MPID=0				# Player pid
TESTME=''			# Fake a selection with test XYZ (use 'test' 'VideoPath')
SEASON='Apple'		# The collection of videos under AERIAL that we will use - chosen from STABLE according to time/date

# Markers
OS_TYPE=$(uname -s)
USER=$(id -un)
USID=$(id -u)
LOGF="/tmp/aerialist.$USER.log"

# XDG
[ -z "$XDG_CONFIG_HOME" ] && XDG_CONFIG_HOME=~/'.config'
[ ! -d "$XDG_CONFIG_HOME" ] && mkdir -p "$XDG_CONFIG_HOME"

[ -z "$XDG_RUNTIME_DIR" ] && XDG_RUNTIME_DIR="/var/run/user/$USID"
[ ! -d "$XDG_RUNTIME_DIR" ] && {
	mkdir -p "$XDG_RUNTIME_DIR" 2>/dev/null
	[ ! -d "$XDG_RUNTIME_DIR" ] && XDG_RUNTIME_DIR="/tmp/run-user-$USID"
	mkdir -p "$XDG_RUNTIME_DIR"
 }

# Allow defaults override in .config/aerialist
PREFS="$XDG_CONFIG_HOME/aerialist"
[ -e "$PREFS" ] && . "$PREFS"

# If RESUME != 0
STATEDB="$XDG_CONFIG_HOME/aerialist-state"

# Auto choice of player
for i in 'mpv' 'mplayer' 'vlc'; do
	[ -z "$PLAYER" ] && which "$i" > /dev/null 2>&1 && PLAYER="$i"
	PLARGS=''
done

# Modern youtube-dl?
YTDL=''
for i in 'yt-dlp' 'youtube-dl'; do
	[ -z "$YTDL" ] && which "$i" >/dev/null 2>&1 && YTDL="$i"
done


Msg()	{	echo "$(date +%k:%M:%S)	$@" >&2;		}
Log()	{	[ $TEST -eq 0 ] && Msg "$@" >> "$LOGF" 2>&1 || Msg "$@" 2>&1 | tee -a "$LOGF";	}
Dbg()	{	[ $TEST -ne 0 ] && Msg "+++ [$@] +++";	}
Err()	{	Msg "*** [$@] ***";						}
Throw()	{	Err "$@"; exit 44;						}

SeasonMatch()
 {
	# Process SEASON table (on stdin) and echo first matched Season - or $1 if no match - forked so everything local really
	local	d m w H M pw pdb pde phb phe pS pmb pme egb snd x Xs

	M=$(date "+%d %m %w %H %M");	Dbg "Season.: $M"
	d="${M%% *}";	M="${M#* }"
	m="${M%% *}";	M="${M#* }"
	w="${M%% *}";	M="${M#* }"
	H="${M%% *}";	M="${M#* }";	H="${H#0}";	M="${M#0}"

	Xs=0	# To do - calculate weight and return for a re-run?
	while read pw pdb pde phb phe snd x pS; do if [ -n "$pw" ]; then
		# Old format support - inserted column in 1.2, default it to 0
		[ -z "$pS" ] && pS="$x" && x=0

		# Dbg "Season?: [W:$pw][D:$pdb[$pde][T:$phb][$phe][S:$pS][D:$d/$m W:$w T:$H/$M]" >&2
		# * Matches anything
		if [ "$pw" = '*' -o "${pw#*$w}" != "$pw" ]; then	# Weekday is all or contains today (0-6)
			pmb="${pdb%-*}";	pdb="${pdb#*-}"
			pme="${pde%-*}";	pde="${pde#*-}"
			# Dbg "Season-: [$pmb[$pme][$pdb][$pde]"
			dm=0
			if [ "$pmb" = '*' -o "$pme" = '*' ]; then
				dm=1
			else
				# If at start month, >= start day ... if Left to right, inside, else outide
				[  \( $m -eq $pmb -a $d -ge $pdb \) \
				-o \( $m -eq $pme -a $d -le $pde \) \
				-o \( $pmb -lt $pme -a $m -gt $pmb -a  $m -lt $pme \) \
				-o \( $pmb -gt $pme -a \( $m -gt $pmb -o $m -lt $pme \) \) ] && dm=1
			fi
			# If match so far, check hour range
			if [ $dm -ne 0 ]; then
				dm=0
				if [ "$phb" = '*' -o "$phe" = '*' ]; then
					dm=1
				else
					[  \( $phb -le $phe -a $H -ge $phb -a $H -le $phe \) \
					-o \( $phb -ge $phe -a \( $H -ge $phb -o $H -le $phe \) \) ] && dm=1
				fi
				[ $dm -ne 0 ] && echo "$snd:$pS" && return 0
			fi
		fi
	fi; done

	[ -n "$1" ] && echo "$1" || echo "$pS"	# Default if no match (provided or last one in table)
 }

SourceSet()
 {
	local i

	# Default
	SEASON="$1"
	MOVIES="${AERIAL}/${SEASON}"

	# Some alternative locations for MOVIES if it not a directory - or chosen based on Season election
	if [ ! -d "$MOVIES" ]; then
		for i in "${AERIAL}/${SEASON}" "${AERIAL%/*}/$SEASON" ~/"Videos"/Aerial*/"$SEASON" \
				'/home'/*/"VIDEO"/Aerial*/"$SEASON" ~/"Videos/$SEASON" '/home'/*/"VIDEO/$SEASON" \
				"/SHARE/VIDEO/COLLECTION/$SEASON" "/SHARE/DRONE/$SEASON"; do
			[ -d "$i" ] && MOVIES="$i" && Dbg "Selected: $i"
		done
	fi

	# No folder found?
	if [ -z "$MOVIES" ]; then
		MOVIES="$AERIAL/$SEASON"
		Download "$SEASON"
	elif [ ! -e "$AERIAL" ]; then		# If we have found them elsewhere; convenience link in e.g. ~/Videos
		Dbg "Linking $MOVIES to $AERIAL"
		ln -s "${MOVIES%/*}" "$AERIAL"
	fi

	# Continue unfinished downloads until folder count matches
	# CacheOne "$MOVIES" "$SEASON"

	# End with / for find
	[ "$MOVIES" = "${MOVIES%/}" ] && MOVIES="${MOVIES}/"

	# database files to allow for no repeats when playing videos
	# Subtitle to show occasional text
	VIDEODB="$XDG_CONFIG_HOME/aerialist-${SEASON}"
	SUBTITLE="$XDG_CONFIG_HOME/aerialist-${SEASON}.srt"

	Dbg "Movies:	$MOVIES"
 }

SeasonSet()
 {
	local	s skip

	# Get Season / Sound
	if [ $ONLINE -gt 1 ]; then
		s='Apple'
		Dbg 'Online forced'
	elif [ -n "$1" ]; then
		s="$1"
	else
		[ -n "$STABLE" ] && s=$(echo "$STABLE" | SeasonMatch "$SEASON")
		SOUND="${s%%:*}"
		s="${s#*:}"
	fi

	Dbg "Season:	$s"
	SourceSet "$s"
 }

VideoSite()
 {
	local	s
	for s in $VITES; do
		[ "${s%%:*}" = "$1" ] && OUT="${s#*:}" && return 0
	done
	OUT="${s#*:}"
 }

VideoBites()
 {
	# Return IDs of videos for season in $1 - or list of seasons if $1 is empty
	local	x s cs
	echo "$BITES" | while read x; do if [ -n "$x" ]; then
		x="${x%%#*}"
		[ "$x" != "${x#*=}" ] && s="${x%%=*}" && [ -n "$s" ] && cs="$s" && [ -z "$1" ] && echo "$cs"
		[ "$cs" = "$1" ] && echo "${x#*=}"
	fi; done
 }

Download()
 {
	# $1 is Season to download
	# $2 if 'one' - just download one and return
	#	if 'cache' - download one in background
	#	if 'count' - just return number of videos for this season (to compare e.g. to folder count) in $OUT
	local line st url n i f v cnt

	# Download a Season's content from YouTube
	cnt=0
	if [ "$1" = 'Apple' ]; then
		Msg "Apple season (CACHE: $CACHE)"
		if [ $CACHE -ne 0 ]; then
			mkdir -p "$MOVIES"
			cd "$MOVIES"
			AppleVideo
			if [ "$2" = 'count' ]; then
				while read line; do cnt=$((1 + $cnt)); done < "$OUT"
				OUT=$cnt
				return 0
			else
				while read line; do if [ -n "$line" ]; then
					ApplePie "$line"; st="$OU2"; url="$OUT"; n="${OUT##*/}"
					Dbg "AppleTV:	$st ($url)"
					for i in *"${n}"; do [ -s "$i" ] && n=''; done
					if [ -n "$n" ]; then
						if [ "$2" = 'cache' ]; then
							Log "Caching:	$url to $MOVIES"
							curl -o "${st}-${n}" "$url" &
							return 2
						else
							Log "Downloading:	$url to $MOVIES"
							curl -o "${st}-${n}" "$url"
							Log "Downloaded:	$n"
							[ "$2" = 'one' ] && return 1
						fi
					else
						Log "ATV:	${url##*/} already exists"
					fi
				fi; done < "$OUT"
			fi
		fi
		return 0
	elif [ -n "$YTDL" -a $CACHE -ne 0 ]; then
		local	vIds v f src

		vIds=$(VideoBites "$1")
		[ -z "$vIds" ] && Err "No predefined videos for Season: $1" && return 1

		mkdir -p "$MOVIES"
		if [ -d "$MOVIES" ]; then
			cd "$MOVIES"
			# yt-dlp names title [id].xyz - youtube-dl names title-id.xyz (where id can contain a '-')
			for v in $vIds; do
				if [ "$2" = 'count' ]; then
					cnt=$((1 + $cnt))
				else
					src="${v%%:*}"
					v="${v#$src:}"
					[ -z "$src" ] && src='YT'
					for f in *"${v}"*; do if [ -s "$f" ]; then
						f="${f%.*}"
						f="${f%]*}"
						f="${f##*[}"
						while [ ${#f} -gt 11 -a "${f}" != "${f#*-}" ]; do
							f="${f#*-}"	# ID might have '-' in it anywhere
						done
						[ "$f" = "$v" ] && v=''
					fi; done
					if [ -n "$v" ]; then
						VideoSite "$src"; site="$OUT"
						if [ "$2" = 'cache' ]; then
							Log "Caching $src:	$v in $MOVIES"
							"$YTDL" "${ONLINETPT}://${site}${v}" &
							return 2
						else
							Log "Downloading $src:	$v in $MOVIES"
							"$YTDL" "${ONLINETPT}://${site}${v}"
							Log "Downloaded $src:	$v"
							[ "$2" = 'one' ] && return 1
						fi
					else
						Log "Already have:	$f in $1"
					fi
				fi
			done
		else
			Err "$MOVIES could not be created to stash videos"
		fi
	else
		Err "No youtube-dl + CACHE settign to populate $MOVIES for $1"
	fi
	[ "$2" = 'count' ] && OUT=$cnt
 }

IsInstalled()
 {
	local	a c
	a=~/'.xscreensaver'
	[ ! -s "$a" ] && return 1
	c="$0"; [ "$c" != "${c#/}" ] || c="$(pwd)/$c"
	grep -q "$c" "$a"
 }

Install()
 {
	local	o a c line

	o=~/'.xscreensaver.pre-aerialist'
	a=~/'.xscreensaver'

	if [ ! -s "$a" ]; then
		echo "# Created by ${0} on $(date)
timeout:        0:22:00
splash:         False
mode:           random
programs:                                                                 \
                    \"Aerialist\"   /all/script/aerialist 4k            \n\
" > "$a"
	fi

	if [ -s "$a" ]; then
		c="$0"; [ "$c" != "${c#/}" ] || c="$(pwd)/$c"

		echo "------------------------------------------------------------------
INSTALL
	Original:	$o
	Aerialist:	$a
	Command:	$c

Press return to install ${0##*/} into .xscreensaver, Ctrl-C to quit

Type any parameters to add when started separated with a space:

	Type 4k to use 4k videos when available
	Type hdr to use HDR videos when available
	Type volume X to set volume to X% when playing
	Type offline to never use AppleTV online videos
	Type online to always use AppleTV online videos
	Type movies PATH to use PATH for video searching
------------------------------------------------------------------
"
		grep -q "$c" "$a" && echo "$c is already installed in $a, but you can update it.
"

		printf "Parameters: "; read line
		cp -f "$a" "$o"
		echo "Installing [$c] as a screensaver..."
		if [ -s "$o" ]; then
			awk -v "PRG=$c $line" 'BEGIN { I=0 }
				{
					P=1
					if (I) {
						p=$1
						if ("-" == p) p=$2
						if (index(p, "Aerial") > 0) P=0
					}
					if (P) print $0
					# Funky format of .xscreensaver prefs - why not redone in 6.0?!? ;)
					if ("programs:" == $1) {
						print "\t\t\"Aerialist\"\t" PRG "\t\t\t    \\n\\"
						I=1
					}
				}' "$o" > "$a"
			echo 'Should be installed, here is the diff:
--------------'
			diff "$a" "$o"
			echo '--------------
'
		fi
	fi

	# Download videos?
	[ $CACHE -eq 0 ] && echo "CACHE is set to 0 - so no videos will be downloaded,
	only played via the AppleTV service." && exit 21

	echo "
Needed Programs (Set up XScreenSaver in its GUI)
Youtube-DL:	$(which $YTDL 2>&1)
Curl:		$(which curl 2>&1)
Player:	$(which $PLAYER 2>&1)
XScreenSaver:	$(which xscreensaver 2>&1)
Video Root:	$AERIAL"
	echo '
Videos will be downloaded/streamed as needed.

(Streaming only works with ATV videos, not YouTube.)

Press enter to download videos now (many gigabytes)
or ctrl-C to stop here.
'
	printf "Enter to continue: "; read line
	TEST=1	# Show messages to screen

	[ $ONLINE -gt 1 ] && ONLINE=1	# Otherwise no downloading
	echo "$STABLE" | while read pw pdb pde phb phe snd pri pS; do if [ -n "$pS" ]; then
		Dbg "> __________ > $pS < __________ <"
		SeasonSet "$pS"
		Dbg "Video Path:	$MOVIES"
		Download "$pS"
	fi; done

	exit 22
 }

Random()
 {
	# Return random 0 through $1-1 in $OUT
	local m="$(od -vAn -N4 -tu4 < /dev/urandom)"
	m=1$(date '+%S')"${m#*[0-9]}"
	[ $1 -eq 0 ] && OUT=0 || OUT=$(($m % $1))
	Dbg "Random:	$OUT"
 }

RandomLine()
 {
	# Pick and remove a random line from a file
	local	pick
	Random $(wc -l "$1")
	pick=$((1 + $OUT))
	OUT=$(sed "${pick}q;d" "$1")	# Get the line
#	cp "$1" "${1}.last"
	case "$OS_TYPE" in
	  'FreeBSD')	sed -i '' "${pick}d" "$1"	;;
	  *)			sed -i "${pick}d" "$1"		;;	# Remove the line
	esac
 }

ApplePit()
 {
	# Scan an AppleTV Json file for videos & properties
	local	k c v k2h k2s k4h k4s l t
	t='unk'
	while read k c v; do
		k="${k#\"}"
		k="${k%%\"*}"
		case "$k" in
		  'accessibilityLabel')	l="${v#\"}";	l="${l%%\"*}"	;;
		  'timeOfDay')		t="${v#\"}";	t="${t%\"}"			;;
		  'url-1080-SDR')	k2s="${v#*:}";	k2s="${k2s%%\"*}"	;;
		  'url-1080-HDR')	k2h="${v#*:}";	k2h="${k2h%%\"*}"	;;
		  'url-4K-SDR')		k4s="${v#*:}";	k4s="${k4s%%\"*}"	;;
		  'url-4K-HDR')		k4h="${v#*:}";	k4h="${k4h%%\"*}"	;;
		  'url')			k2s="${v#*:}";	k2s="${k2s%%\"*}"	;;	# tvos 11 format
		  '}'*)				[ -n "$l" -a -n "$k2s" ] && echo "$t:$l:$k2s:$k2h:$k4s:$k4h" && l=''	;;
		esac
	done
	[ -n "$l" -a -n "$k2s" ] && echo "$t:$l:$k2s:$k2h:$k4s:$k4h"
 }

ApplePie()
 {
	local	tod st k2s k2h k4s k4h c
	# Return (in OUT) the appropriate slice of pie for a line of AppleURL
	c="$1"
	tod="${c%%:*}";	c="${c#*:}"	#	day/night/unk
	st="${c%%:*}";	c="${c#*:}"	#	Apple Description
	k2s="${c%%:*}";	c="${c#*:}"	#	2k SDR
	k2h="${c%%:*}";	c="${c#*:}"	#	2k HDR
	k4s="${c%%:*}";	c="${c#*:}"	#	4k SDR
	k4h="${c%%:*}";
	c="$k2s"
	case "$ONLINE4K$ONLINEHDR" in
	  '01')	[ -n "$k2h" ] && c="$k2h"	;;		# Could we get display size / HDR ability somehow to auto decide?
	  '10') [ -n "$k4s" ] && c="$k4s"	;;
	  '11') [ -n "$k4h" ] && c="$k4h"	;;
	esac
	OUT="${ONLINETPT}:${c}";	OU2="$st"
#	Dbg "ApplePie: $OUT ($1)"
 }

AppleVideoJson()
 {
	# ATVos 10, 11
	local	u
	for u in \
		'http://sylvan.apple.com/Aerials/2x/entries.json' \
		'http://a1.phobos.apple.com/us/r1000/000/Features/atv/AutumnResources/videos/entries.json' \
		; do
		curl "$u" 2>/dev/null | ApplePit
	done
 }

AppleVideoTar()
 {
	# ATVos 12+
	local u p
	for u in \
		'http://sylvan.apple.com/Aerials/resources.tar' \
		'http://sylvan.apple.com/Aerials/resources-13.tar' \
		'http://sylvan.apple.com/Aerials/resources-14.tar' \
		'http://sylvan.apple.com/Aerials/resources-15.tar' \
		'http://sylvan.apple.com/Aerials/resources-16.tar' \
		'http://sylvan.apple.com/Aerials/resources-17.tar' \
		; do
		(	p="/tmp/Aerialist.$USER.$$"
			mkdir -p "$p"
			cd "$p"
			curl -o 'tv.tar' "$u" 2>/dev/null
			tar xf 'tv.tar' 'entries.json' 2>/dev/null
			[ -s 'entries.json' ] && ApplePit < 'entries.json' 2>/dev/null
			rm -f 'tv.tar' 'entries.json'
			cd ..
			rmdir "$p")
	done
 }

AppleVideo()
 {
	# Download if needed to DB, make a copy to $1 if provided
	local	avu="$XDG_CONFIG_HOME/aerialist-AppleURL"

	if [ ! -s "$avu" ]; then
		AppleVideoJson > "$avu"
		AppleVideoTar >> "$avu"
	fi
	[ -s "$avu" -a -n "$1" ] && cp "$avu" "$1"
	OUT="$avu"
 }

FormatIsOK()
 {
	local	i f

	if [ -n "$FORMATS" ]; then
		if which 'mediainfo' >/dev/null 2>&1; then
			f=$(mediainfo --Inform="Video;%Format%" "$CHOICE")
			if [ -n "$f" ]; then
				Dbg "Format: $f"
				OUT="$f"
				for i in $FORMATS; do
					[ "$i" = "$f" ] && return 0
					[ "${i#-}" = "$f" ] && return 1
				done
				return 0
			else
				Dbg "mediainfo returned no format for: $CHOICE"
			fi
		else
			Dbg "FORMATS is specified as $FORMATS but mediainfo is not installed."
		fi
	fi
	OUT=''
 }

ProposeVideo()
 {
	# Select a video according to SEASON - but may be wrong format
	local	n i hour w

	SeasonSet	# Select right set of videos

	Dbg "Movie DB:	$VIDEODB"

	# If db is empty, find all the '*.mov' videos in $MOVIES for night or day and stash in VIDEODB or NIGHT_DB
	# Select and delete one line from VIDEODB or NIGHT_DB, store in $CHOICE
	if [ ! -s "$VIDEODB" ]; then
		if [ -d "$MOVIES" -a "$SEASON" != 'Apple' ]; then
			Dbg "Find:	find \"$MOVIES\" -type f -iname '*.mkv' -o -iname '*.mov' -o -iname '*.mp4' -o  -iname '*.webm'"
			find "$MOVIES" -type f -iname '*.mkv' -o -iname '*.mov' -o -iname '*.mp4' -o -iname '*.webm' > "$VIDEODB"
			n=$(wc -l "$VIDEODB"); n="${n%% *}"
			Dbg "Found:	$n videos"
			# Start a background caching process if videos are less than expected
			Download "$SEASON" 'count'; w=$OUT
			[ $n -lt $w ] && Dbg "Want: $n videos" && Download "$SEASON" 'cache'
		else
			n=0
		fi
		if [ $n -le 0 ]; then
			[ $ONLINE -eq 0 ] && Throw "No videos in $MOVIES"
			SeasonSet 'Apple'
			AppleVideo "$VIDEODB"
			n=$(wc -l "$VIDEODB"); n="${n%% *}"
		fi
	fi

	# select at random a video from collection ($SEASON) to play
	RandomLine "$VIDEODB"
	[ -n "$TESTME" ] && Msg "Test override: $TESTME" && OUT="$TESTME" && TESTME=''
	CHOICE="$OUT"
	[ -z "$CHOICE" ] && Throw "No choice in $VIDEODB"
 }

ChooseVideo()
 {
	local	i=0

	while [ $i -lt 11 ]; do
		ProposeVideo
		FormatIsOK && return 0 || Log "Ignoring format: $OUT from $CHOICE"
		i=$((1 + $i))
	done
 }

VideoDescription()
 {
	# Look up some key terms to create a video decription
	#	If video filename (lower cased) matches before ':',
	#	show string after ':' instead of file name
	local	line k v name
	local	vd='
Greg_Kerr:? Means a guess - have not verified

b2-2:Kamehameha Childhood Hideout?
b2-4:San Francisco Dawn
b4-3:Golden Gate Bridge from San Francisco
396B_1105:Somewhere in Italy?
401c_1037:Ireland and Britain by Night from ISS?

CH_C007_C011:China West of Xi`an?
DB_D001_C005:Dubai Harbor?
LA_A006_C008:LAX
MEX_A006_C008:Republicans meeting in Mexico?
PA_A010_C007:Democarats meeting in PA?
TH_804_A001:Thailand (aka Paradise) Undersea?

1223LV_FL:Maybe Chicago?
GMT026:Korea and Japan at Night from Space?
GMT110:Aurora Antarctica
GMT312:Africa at Night from Space?

arthursseat:Arthur`s Seat, Edinburgh, UK
big-sur:Big Sur, California
hampstead:London, UK from Hampstead
northstrip:Las Vegas Strip (North)
pecos_fog:Foggy Pecos, Texas, US
portland:Portland, Oregon, US
'
	ToLower "$1"; name="$OUT"
	OUT=$(echo "$vd" | while read line; do if [ -n "$line" ]; then
		v="${line#*:}"
		ToLower "${line%%:*}"; k="$OUT"
		[ "${name#*$k}" != "$name" ] && echo "$v"
	fi; done)
	[ -z "$OUT" ] && OUT="${1%-???????????}"	# Drop 11c youtube code for youtube-dl videos
 }

ToLower()
 {
#	[ -n "$BASH_VERSINFO" ] && [ $BASH_VERSINFO -gt 3 ] && OUT="${1,,*}" && return
	OUT=$(echo "$1" | tr '[:upper:]' '[:lower:]')
 }

Subtitles()
 {
	local	t u n s f c g

	f="+%H:%M, %A, %d. %B"
	case "$OS_TYPE" in
	  'FreeBSD')	c='-v+'	;;	# FreeBSD Date increment
	  *)			c='-d@'	;;	# NetBSD/Linux Date format at seconds
	esac
	t=0; n=1
	s=$(date +%s)
	while [ $n -lt $SUBREPEATS ]; do	# 33 * SUBINTERVAL minutes worth of messages
		u="${t}"
		[ ${#u} -eq 1 ] && u="0$u"
		[ "${c%@}" = "$c" ] && g="${c}${t}M" || g="${c}${s}"
		g=$(date "$g" "$f")
		echo "$n
00:${u}:03,142 --> 00:${u}:09,067
$g
$1
"
		t=$(($t + $SUBINTERVAL))
		n=$((1 + $n))	# In case some joker makes SUBINTERVAL 0
		s=$((60 * $SUBINTERVAL + $s))
	done
	# Dbg "Date Parameters: [$g][$f]"
 }

GetState()
 {
	local line f

	f="${CHOICE##*/}"
	OUT=''
	if [ $RESUME -ne 0 ]; then
		if [ -s "$STATEDB" ]; then
			while read line; do
				[ "${line##*:}" = "$f" ] && OUT="${line%%:*}" # && Log "State for $f is $OUT"
			done < "$STATEDB"
		fi
		return 0
	fi
	return 1
 }

SaveState()
 {
	local	t s line
	if [ $RESUME -ne 0 ]; then
		GetState; [ -z "$OUT" ] && OUT=0
		if [ "$1" = '0' ]; then
			t=0
			[ $OUT -eq 0 ] && return 0
		else
			s=$(( $(date +%s) - $STARTAT ))	# How many seconds have played
			t=$(($OUT + $s))	# Played before + played now
		fi
		echo "$t:${CHOICE##*/}" > "${STATEDB}.new"
		if [ -s "$STATEDB" ]; then
			while read line; do
				[ "${line##*:}" != "${CHOICE##*/}" ] && echo "$line" >> "${STATEDB}.new"
			done < "$STATEDB"
			cp "${STATEDB}" "${STATEDB}.old"
		fi
		cp "${STATEDB}.new" "${STATEDB}"
		rm -f "${STATEDB}.old"
		OUT=$t
	fi
 }

IsUp()
 {
	local f
	case "$OS_TYPE" in
	  'Linux')	f='-h -q'	;;
	  *)		f='-p'		;;
	esac
	ps $f "$1" > /dev/null 2>&1
 }

Abort()
 {
	local	mpid f
	if [ $MPID -ne 0 ]; then
		mpid="$MPID"
		MPID=0
		Log "Abort: $mpid"
		IsUp $mpid && kill $mpid
		mv -f "$lockf" "${lockf}.old"
		SaveState
		[ $RESUME -ne 0 ] && Log "Stopped at: $OUT"
		sleep 1
		IsUp $mpid && Log "Ninja: $mpid" && kill -9 $mpid
		exit 66
	else
		Log "Lost player"
		cat "$lockf" >> "$LOGF"
	fi
 }

Scale()
 {
	local	n maxs maxd dig	o #	(e.g. 1 100 8 4 -> 0.125)
	n=$1
	maxs=$2
	maxd=$3
	dig=$4
	n=$(($n * $dig * $maxd / $maxs))	#	1 -> 0.080; 100 -> 8.000
	o=$(($n % $dig + $dig))
	echo $((n / $dig)).${o#1}
 }

PlayerArgs()
 {
	local	subf vol tsiz seek

	seek=''
	[ $RESUME -ne 0 ] && GetState && [ -n "$OUT" ] && seek="$OUT"

	OUT=''
	case "$PLAYER" in
	  # Don't mess with screensaver, quiet, full screen, subtitles, seek, 
	  'mplayer')
		# Sometimes still using 80% cpu - I think not right -vo
		[ $TEST -eq 0 ] && OUT="${OUT} -really-quiet"
	  	OUT="${OUT} -nostop-xscreensaver -fs -title Aerialist -framedrop"
		if [ -n "$1" ]; then
			OUT="${OUT} -sub $1"
			[ -n "$TEXTSIZE" ] && OUT="${OUT} -subfont-text-scale $TEXTSIZE -subfont-autoscale 0"
			[ -n "$TEXTRGB" ] && OUT="${OUT} -ass -ass-color $TEXTRGB"
		fi
	  	[ -n "$PANSCAN" ] && OUT="${OUT} -panscan $PANSCAN"
	  	[ -n "$seek" ] && OUT="${OUT} -ss $seek"
		[ -z "$SOUND" -o "$SOUND" = '0' ] && OUT="${OUT} -nosound" || OUT="${OUT} -volume $SOUND"
		[ -n "$XSCREENSAVER_WINDOW" ] && OUT="${OUT} -really-quiet -wid $XSCREENSAVER_WINDOW"
	  ;;
	  'mpv')
		[ $TEST -eq 0 ] && OUT="${OUT} --really-quiet"
		OUT="${OUT} --stop-screensaver=no --fs"		# Framedrop - auto in mpv
		OUT="${OUT} --hwdec=auto-safe"				# auto, auto-safe
#		OUT="${OUT} --vo=gpu"
#		OUT="${OUT} --vo=vdpau"
		[ -n "$SOUND" ] && OUT="${OUT} --volume=$SOUND"
		if [ -n "$1" ]; then
			OUT="${OUT} --sub-file=$1"
			[ -n "$TEXTSIZE" ] && OUT="${OUT} --sub-font-size=$(($TEXTSIZE * 8))"
			[ -n "$TEXTRGB" ] && OUT="${OUT} --sub-color=#$TEXTRGB"
		fi
	  	[ -n "$seek" ] && OUT="${OUT} --start=$seek"
		[ -n "$XSCREENSAVER_WINDOW" ] && OUT="${OUT} --wid=$XSCREENSAVER_WINDOW"
	  ;;
	  'vlc')
		[ $TEST -eq 0 ] && OUT="${OUT} --quiet --no-qt-error-dialogs"
		OUT="${OUT} --no-disable-screensaver -f --no-interact --play-and-exit --started-from-file"
		if [ -n "$1" ]; then
			OUT="${OUT} --sub-file $1"
			[ -n "$TEXTSIZE" ] && OUT="${OUT} --sub-text-scale $(($TEXTSIZE * 16))"
			[ -n "$TEXTRGB" ] && OUT="${OUT} --freetype-color="$(($(echo "ibase=16; $TEXTRGB" | bc) / 256))
		fi
	  	[ -n "$seek" ] && OUT="${OUT} --start-time $seek"
		[ -z "$SOUND" -o "$SOUND" = '0' ] && OUT="${OUT} --no-audio" || OUT="${OUT} --gain "$(Scale $SOUND 100 4 1000)	# Should be 8 - but seems loud
		[ -n "$XSCREENSAVER_WINDOW" ] && OUT="${OUT} --drawable-xid $XSCREENSAVER_WINDOW --no-embedded-video"
	  ;;
	esac	
	OUT="${OUT} $PLARGS"
 }

# Lock for this display
lockf="$XDG_RUNTIME_DIR/.aerialist.${DISPLAY#*:}.lock"
if [ -e "$lockf" ]; then
	pid=$(head -n 1 "$lockf")	# aerialist
	case "$OS_TYPE" in
	  'Linux')	f='-h -q'	;;
	  *)		f='-p'		;;
	esac
	ps $f "$pid" >/dev/null 2>&1 && echo "Aerialist locked by $pid in $lockf" && exit 33
	pid=$(tail -n 1 "$lockf")	# $PLAYER
	ps $f "$pid" >/dev/null 2>&1 && kill -9 "$pid"
fi
echo $$ > "$lockf"

# Poor mans getopts - Install into xscreensaver and exit, test mode (just output what would happen)
while [ -n "$1" ]; do a=0; case "$1" in
  'install')	Install						;;	# Install into Xscreensaver / Download MOVIES
  'online')		ONLINE=2					;;	# Use AppleTV videos
  'offline')	ONLINE=0					;;	# ... or do NOT
  'sound')		SOUND=25					;;	# Audio
  'volume')		SOUND="$2"; a=1				;;	
  'aerial')		AERIAL="$2"; a=1			;;	# MOVIES folders inside here
  'movies')		MOVIES="$2"; a=1			;;	# Just use this one
  'hdr')		ONLINEHDR=1					;;	# AppleTV Video quality
  '4k')			ONLINE4K=1					;;
  'test')		TEST=1; TESTME="$2"; a=1	;;	# Test one video file
  'seas'*)		VideoBites; exit 0			;;	# Show seasons
  'vid'*)		VideoBites "$2"; exit 0		;;	# Show videos
  'cron'*)		echo "$STABLE"; TEST=1
				SeasonSet; exit 0			;;	# Show Time Table and current choice
  'set'*)
	for i in 'joe' 'pico' 'nano' 'vi' 'emacs'; do
		[ -z "$EDITOR" ] && which "$i" > /dev/null 2>&1 && EDITOR="$i"
	done
	if [ ! -e "$PREFS" ]; then
		head -n 1 "$0" > "$PREFS"
		echo "#
#
#	Aerialist $gVers Preferences
#
#	$(date)
#
#	Remove any lines you do not change (if you like)
#" >> "$PREFS"
		head -n 90 "$0" | tail -n 40 >> "$PREFS"
	fi
	exec "$EDITOR" "$PREFS"; exit 0
  ;;
esac; shift; [ $a -ne 0 -a -n "$1" ] && shift; done

# Are we inside xscreensaver?
if [ -z "$XSCREENSAVER_WINDOW" ]; then
	TEST=2
	# Are we installed?
	if ! IsInstalled; then
		echo 'Aerialist is not installed, type i to install or just enter to continue test.'
		read line
		[ "$line" ] = 'i' && Install
	fi
fi

# Show info in test mode
if [ $TEST -ne 0 ]; then
	echo "Aerialist:	$gVers ($gDate)

Season:		$SEASON
Movies:		$AERIAL
Prefs:		$PREFS
Formats:	$FORMATS
Lockfile:	$lockf
Player:		$(which $PLAYER)
Curl:		$(which curl)
YouTube:	$YTDL
MediaInfo:	$(which mediainfo)
Process:	$$
"
fi

# Plays the video - local and remote
for i in "$PLAYER" 'curl'; do
	command -v "$i" >/dev/null 2>&1 || Throw "${0##*/} requires $i but it's not installed. Aborting."
done

############# Play loop - catch interupts ##############
#
trap Abort TERM INT HUP

# Until we are killed...
while [ 9 -eq 9 ]; do
	ChooseVideo

	if [ "$SEASON" != 'Apple' ]; then				# Offline (vs AppleTV)?
		Dbg "No pie: $SEASON"
		st="${CHOICE##*/}";	st="${st%%.*}";	st="${st%%-*}"	# Default title - drop extension, youtube ID
	else
		ApplePie "$CHOICE";	CHOICE="$OUT"; st="$OU2"

		if [ "$CACHE" -ne 0 ]; then
			f="${st}-${CHOICE##*/}"
			if [ ! -s "${MOVIES}$f" ]; then
				# Changed or no name in front of -
				for i in "${MOVIES}"*"$CHOICE"; do [ -s "$i" ] && f="$i"; done
				[ $TEST -ne 0 -a ! -s "$MOVIES$f" ] && Msg "Cache ON, press return to download to $f in background" && read line && [ "$line" = 'q' ] && Throw 'Manual abort'
			fi
			for i in "${MOVIES}"/*"${CHOICE##*/}"; do [ -s "$i" ] && CHOICE=''; done
			if [ -z "$CHOICE" ]; then
				CHOICE="${MOVIES}$f"
				Dbg "Using Cache: $f"
			else
				Log "Background DL: $CHOICE to $MOVIES$f"e
				Download 'Apple' 'cache'
			fi
		fi
	fi

	# Create SUBTITLE blurp at 0,5,10,15 minutes
	VideoDescription "$st"; st="$OUT"					# Allow for overriding file name / Apple description
	Subtitles "$st" > "$SUBTITLE"
	PlayerArgs "$SUBTITLE"; args="$OUT"

	STARTAT=$(date +%s)

	if [ $TEST -ne 0 ]; then
		head -n 5 "$SUBTITLE"
		echo "Choice:	$CHOICE"
		[ "$CHOICE" = "${CHOICE#*:}" ] && ls -lh "$CHOICE"
		echo '
Press return to play'
		echo "Test mode: $PLAYER $args \"$CHOICE\""
		echo 'Press q during playback to exit'
		read line
		[ "$line" != 'q' ] && "$PLAYER" $args "$CHOICE"
		exit 1
	elif [ -s "$CHOICE" ]; then
		# file is on filesystem so just play it
		"$PLAYER" $args "$CHOICE" >> "$LOGF" 2>&1 &
	    MPID=$!
		Log "Local ($MPID): $PLAYER $args \"$CHOICE\""
	elif [ $ONLINE -ne 0 -a "${CHOICE}" != "${CHOICE#*://}" ]; then
		# no file on filesystem so try to stream it
		"$PLAYER" $args "$ONLINEURL/$CHOICE" >> "$LOGF" 2>&1 &
		MPID=$!
		Log "Stream ($MPID): $PLAYER $args \"$ONLINEURL/$CHOICE\""
	else
		Log "*** $MOVIES ($CHOICE) is uncached and ONLINE is $ONLINE ($ONLINE4K/$ONLINEHDR) ***"
		exit 99
	fi
	echo "$MPID" >> "$lockf"
	wait $MPID
	err=$?
	sleep 3	# Sometimes PID hangs around after death
	[ $err -gt 128 ] && { Log "Killing: $MPID"; Abort; exit 121; } || SaveState 0
done

#################################################################################################################
#	* Notes
#	Video descriptions incomplete - could not find a table of them online
#		(See VideoDescription function below)
#
#	Todo
#	001	GLK	240131	Seasonal weight column to mix by %age
#
#	History
#	022	GLK	240205	Fix RESUME - was never working
#	021	GLK	240202	Seasonal weight support in STABLE (but not yet implemented)
#	020	GLK	240131	Move all video IDs to BITES for extension / replacement in settings
#	019	GLK	240130	Support Dailymotion via dmo: prefix on video IDs
#	018	GLK	240129	Some formats not playing well on e.g. 8559U processors (AV1) - skip them via FORMATS
#	017	GLK	240129	Start one video download per season in backgroundnd if folder count < expected count for season
#	016	GLK	240129	Added seasons / a few videos for them, started background caching
#	015	GLK	240127	Add (prefer) mpv support, start vlc - reason - mplayer using 80% CPU, mpv 15% ... even with -vo vdpau
#	014	GLK	240123	Bugs
#	013	GLK	231227	Fix darwin UID being ro, prompt to install w/ no parameters if not installed
#	012	GLK	231224	Log download beg/end
#	011	GLK	231218	Move History here ... makes more sense, settings command
#	010	GLK	231217	Install can over-install, create .xscreensaver (untested)., Offer to DL videos at install
#	009	GLK	231216	Resume movies where screensaver was interrupted (for long youtube videos)
#	008	GLK	231215	Download YT videos into AERIAL/SEASON folder if not populated but requested
#	007	GLK	231214	Tear up night/day ... just use seasons, Apple video integration
#	006	GLK	231212	Support youtube-dl videos with .webm, .mp4, .mkv, sound option in STABLE
#	005	GLK	231211	In support of christmas (Fireplace videos), allow "Aerial" itself to be changed (SEASON)
#	004	GLK	231210	panscan parameter per AUR
#	003	GLK	231113	Test/fix on NetBSD and 'install'
#	002	GLK	231112	Lock (workaround some leftovers detected), ONLINE option
#	001	GLK	231105	Partial rewrite
#
#	BSD (bourne/dash) compatible
#
#	Tested:		on Artix, Void, PopOS, FreeBSD, NetBSD
#	Requires:	mplayer (or $PLAYER), awk (install), sed, grep & friends, youtube-dl, curl, mediainfo for FORMATS
#################################################################################################################
